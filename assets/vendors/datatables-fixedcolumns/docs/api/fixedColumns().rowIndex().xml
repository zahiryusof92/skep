<?xml version="1.0" encoding="UTF-8" ?>
<dt-api library="FixedColumns">
	<name>fixedColumns().rowIndex()</name>
	<summary>Get the row index of a row in a fixed column</summary>
	<since>3.1.0</since>

	<type type="function">
		<signature>fixedColumns().rowIndex( row )</signature>
		<parameter type="jQuery|node" name="row">
			The row (`-tag tr`) to get the row index of. This can be either a row in the fixed columns or in the host DataTable.
		</parameter>
		<returns type="integer">
			The row index for the given row
		</returns>
		<description>
			Get the row index (`dt-api row().index()`) for a `-tag tr` element, regardless of if the row is contained in a fixed column, or in the scrolling table.
		</description>
	</type>

	<deprecated>
		<version>3.2.1</version>
		<description>
			As of DataTables 1.10.11 and FixedColumns 3.2.1 this method is no longer required to obtain a row index from a node as the `dt-api row()` method will accept the `-tag tr` and `-tag td` elements in the fixed column as selector arguments.
		</description>
		<example title="Get the row index for any row clicked upon in a table (from the fixed column, or the main table)"><![CDATA[

var table = $('#myTable').DataTable();

$(table.table().container()).on( 'click', 'tr', function () {
	var row = table.row( this );
	
	console.log( row.index() );
} );

]]>
		</example>
	</deprecated>

	<description>
		When working with FixedColumns, there is additional complexity in the DataTable as the fixed columns are not technically part of the host DataTables - they just look like it! They are in fact HTML `-tag table` elements themselves, with specific styling to visually integrate them with the host table.

		Since the fixed columns are the ones that the end user sees, they are also the ones that the user will interact with - for example clicking on a cell in the fixed column will give the fixed column cell and _not_ the cell in the DataTable!

		This method is provided to be able to convert from a row in the fixed columns into a DataTables row, by returning the row data index (this is _not_ the visible index, but rather an index internal to DataTables!). That index can then be used with the `dt-api row()` method to obtain a reference to the main DataTable row.
	</description>

	<example title="Get the row index for any row clicked upon in a table"><![CDATA[

$(document).on( 'click', 'tr', function () {
	console.log(
		$('#example').DataTable().fixedColumns().rowIndex()
	);
} );

]]></example>
</dt-api>
